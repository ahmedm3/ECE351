`timescale 1ns / 1ps
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 	Project #1 - ECE 351 (Portland State University)
//	Developed by Harsh Momaya
//
//	Project: 8 bit ALU design using Verilog HDL
//
//  Following functions should be implemented :
//		Add with carry
//		Subtract with borrow
//		Logical Shift left and right
//		Rotate right and left
//		Logical functions- AND, OR, NOT, NAND, NOR, XOR and XNOR
//  Combinational design using behavioral and data flow modeling
//
//
//   												Function table
//											------------------------
// 										 	 sel value 			function
//  											 0000				Add
//	 											 0001				Subtract
//	 											 0010				Shift left
//	 											 0011				Shift right
//	 											 0100				Rotate left
//	 											 0101				Rotate right
//	 											 0110				AND
//	 											 0111				OR
//	 											 1000				NOT
//	 											 1001				NAND
//	 											 1010				NOR
//	 											 1011				XOR
//	 										   	 1100				XNOR
//
//			I/O				Description
//	--------------------------------------
//			A, B			Two 8-bit inputs to the ALU
//			carry_in		Carry in(generated from previous circuit)
//			sel				4-bit input to select the desired function
//			Y				8-bit output signal
//			carry_out		Indicating carry/borrow generated by the ALU
//
//  NOTE:  This model is incomplete  but implements the microarchitecture called out in the ALU specification
//  (with most of the code missing).  You may use it to build your ALU if you'd like but are not
//	required to do so (RK, 05-May-2016)
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

module alu_design (
	input wire [7:0]  A,B,
	input wire carry_in,
	input wire [3:0]  sel,
	output reg [7:0] Y, 
	output reg  carry_out
);
					
					
 	// internal signals declaration
	wire [7:0] addSub_out, rotate_out, shift_out, logical_out;
	reg [4:0] op_en;
	reg dir; 
	wire addSub_cout;	  	
	wire [3:0] out_en;
		
	// adder_subtractor unit instance
	adder_sub unit1 (
		.A(A), 
		.B(B),
		.sub_en(op_en[1]),
		.add_en(op_en[0]),
		.out_en(out_en[0]),
		.carry_in(carry_in),
		.data_out(addSub_out),		
		.carry_out(addSub_cout)
	);
        	 
	// Shift unit instance
	shift_unit unit2 (
		.data_in(A), 
		.shift_by(B),
		.op_en(op_en[2]), 
		.dir(dir),
		.data_out(shift_out),
		.out_en(out_en[1])					
	);
								
								
	// rotate unit instance
	rotate_unit unit3 (
		.data_in(A), 
		.rotate_by(B),
		.op_en(op_en[3]), 
		.dir(dir),
		.data_out(rotate_out),
		.out_en(out_en[2])					
	);
	
	// logical unit instance						
	logical_unit unit4 (
		.A(A),
		.B(B),
		.fn_sel(sel),
		.op_en(op_en[4]),
		.out_en(out_en[3]),
		.data_out(logical_out)
	);
						 
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//													OPERATION ENABLE LOGIC
	//
	//
	//													Operation enable table
	// 								 	op_en (5 bits)							OPERATION
	//									----------------------------------------------------------
	//										  00001								ADD
	//										  00010								SUB
	//										  00100                             Shift
	//										  01000                             Rotate	
	//										  10000								Logical function
	//
	//													 direction (dir- 1 bit)
	//													------------------------
	//  														0 -> right
	//  														1 -> left
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////

	always @* begin
		// ADD YOUR CODE HERE		
	end
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	//														OUTPUT ENABLE LOGIC
	//
	//													   output enable table	
	//									 out_en value (4 bits)  				   OPERATION
	//									 --------------------------------------------------
	//										0001          					add_sub unit
	//										0010                			shift
	//										0100              	 			rotate
	//										1000							logical unit
	//									
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	always @* begin
		// ADD YOUR CODE HERE		
	end
endmodule	

